#include <string>
//#include <ctime>
//#include <stdlib.h>//atoi
#include <iostream>
#include <fstream>
//#include "signal.h"//Ctrl+C catch
#include "fast_md4.h"
#include "fast_md5.h"
#include <openssl/rc4.h>

using namespace std;

typedef unsigned char uint8_t;
typedef unsigned int uint32_t;
typedef unsigned short uint16_t;

size_t getHash(char szHash[], unsigned char hash[])
{
       unsigned int number;
       size_t nHashLen;

       if(((nHashLen = strlen(szHash)) % 2) != 0)
            return(0);

       for(size_t i = 0;i < nHashLen;i++) {
           if(isxdigit(szHash[i]) == 0)
              return(0);
       }

       nHashLen /= 2;

       for(size_t i = 0;i < nHashLen;i++) {
           sscanf(&szHash[i*2],"%2x",&number);
           hash[i] = (unsigned char)number;
       }
       return(nHashLen);
}

void dump(uint8_t *digest)
{
		for(int i = 0;i < 16;i++)
			printf("%02X",digest[i]);
}

int main(int argc, char *argv[])
{
	if(argc!=3)
		exit(1);

	uint8_t clear_data[64];
	uint8_t K[16], K1[16], K2[16], K3[16];
	uint32_t T = 1;
	RC4_KEY data_key;
	uint16_t uni_pwd[128]={0};
	uint8_t k_ipad[100];//65
	uint8_t k_opad[100];//65

	uint8_t ts_checksum_array[25][16]={{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
		{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F },
	{ 0xA6, 0x04, 0x67, 0x77, 0xA8, 0xE0, 0x5F, 0x53, 0x7F, 0x4C, 0xA1, 0x47, 0x9C, 0x26, 0x73, 0x3F }};

	uint8_t enc_data_array[25][36]={{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
		{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 },
	{ 0x2A, 0x97, 0x85, 0xBF, 0x50, 0x36, 0xC4, 0x5D, 0x38, 0x43, 0x49, 0x0B, 0xF9, 0xC2, 0x28, 0xE8, 0xC1, 0x86, 0x53, 0xE1, 0x0C, 0xE5, 0x8D, 0x7F, 0x8E, 0xF1, 0x19, 0xD2, 0xEF, 0x4F, 0x92, 0xB1, 0x80, 0x3B, 0x14, 0x51 }};

	//open the hash list...
	ifstream hash_list(argv[1]);
	
	//check to ensure hash list opened correctly
	if(!hash_list.is_open())
	{
		cout<<"Error opening file \'"<<argv[1]<<"\'\n";
		exit(1);
	}

	char shash[105];//temporary array to store hash strings in

	int numhashes=0;
	while(!hash_list.eof())
	{
		//checksum of timestamp buffer
		uint8_t ts_checksum[16];
		//encrypted timestamp buffer
		uint8_t enc_data[36];

		char schecksum[]="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
		char sencdata[]="XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

		hash_list.getline(shash,105);//get each line of hash file

		if(numhashes==25)//make sure that no more than 25 hashes are loaded
		{
			cout << "more than 25 hashes not supported as of this release!\n";
			exit(1);
		}

		if(strlen(shash)!=104)//make sure timestamps meet requirements
		{
			cout << "encrypted timestamp is a 104-character hex string\n";
			exit(1);
		}

		//chop timestamp string into two different strings...
		for(int i=0;i<32;i++)
			schecksum[i]=shash[i];//the timestamp checksum
		for(int i=0;i<72;i++)
			sencdata[i]=shash[i+32];//and the encrypted timestamp

		//convert strings to binary...
		getHash(schecksum,ts_checksum);

		//and store them in their arrays
		for(int i=0;i<16;i++)
			ts_checksum_array[numhashes][i]=ts_checksum[i];

		getHash(sencdata,enc_data);

		for(int i=0;i<36;i++)
			enc_data_array[numhashes][i]=enc_data[i];

		numhashes++;//count loops
	}

	hash_list.close();//close hash list

	string candidate_s;
	//char candidate_a[9999];//nope, no passwords over 9999 chars. But really?
	cout << "\n";

	while(getline(cin,candidate_s)){
		//K=MD4(Little_endian(UNICODE(pwd))
		for(unsigned int i=0;i<candidate_s.size();i++)
			uni_pwd[i]=candidate_s[i];
		fast_MD4((unsigned char*)uni_pwd,candidate_s.size()*2,K);
		//K1=MD5_HMAC(K,1)
		memset(k_ipad,0,65);
		memset(k_opad,0,65);
		memcpy(k_ipad,K,16);
		memcpy(k_opad,K,16);
		for(int i = 0;i < 64;i++) {
			k_ipad[i] ^= 0x36;
			k_opad[i] ^= 0x5c;
		}
		memcpy(k_ipad+64,(uint8_t*)&T,4);
		fast_MD5(k_ipad,68,K1);
		memcpy(k_opad+64,K1,16);
		fast_MD5(k_opad,80,K1);
		//K3=MD5_HMAC(K1,checksum)
		for(int hloop=0;hloop<numhashes;hloop++)//for each hash in file...
		{
			memset(k_ipad,0,65);
			memset(k_opad,0,65);
			memcpy(k_ipad,K1,16);
			memcpy(k_opad,K1,16);
			for(int i = 0;i < 64;i++) {
				k_ipad[i] ^= 0x36;
				k_opad[i] ^= 0x5c;
			}
			memcpy(k_ipad+64,ts_checksum_array[hloop],16);
			fast_MD5(k_ipad,80,K3);
			memcpy(k_opad+64,K3,16);
			fast_MD5(k_opad,80,K3);
			//clear_data = RC4(K3,encrypted_data)
			RC4_set_key(&data_key,16,K3);
			//decrypt data up to year of timestamp...
			RC4(&data_key,18,enc_data_array[hloop],clear_data);
			//check to ensure year of timestamp
			//is equal to the year packet was captured...
			if(!memcmp(clear_data+14,argv[2],4))
			{
				//reset key
				RC4_set_key(&data_key,16,K3);
				//decrypt entire timestamp
				RC4(&data_key,36,enc_data_array[hloop],clear_data);
				//calculate the checksum
				memset(k_ipad,0,65);
				memset(k_opad,0,65);
				memcpy(k_ipad,K1,16);
				memcpy(k_opad,K1,16);
				for(int i = 0;i < 64;i++) {
					k_ipad[i] ^= 0x36;
					k_opad[i] ^= 0x5c;
				}
				memcpy(k_ipad+64,clear_data,36);
				fast_MD5(k_ipad,100,K2);
				memcpy(k_opad+64,K2,16);
				fast_MD5(k_opad,80,K2);
				//check...
				if(!memcmp(K2,ts_checksum_array[hloop],16))
				{
					cout << "the plaintext of ";
					dump(ts_checksum_array[hloop]);
					dump(enc_data_array[hloop]);
					cout << " is " << candidate_s << "\n\n";
				}
			}
		}
	}

return 0;
}